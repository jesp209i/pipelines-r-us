name: pipeline

on:
  push:
    branches:
     - main
     - using_project-id
     - powershell
     - pwsh-get-changes

env:
  projectId: ${{ vars.PROJECT_ID }}
  umbracoCloudApiKey: ${{ secrets.UMBRACO_CLOUD_API_KEY }}
  baseUrl : https://api.cloud.umbraco.com

jobs:
## Translating AZ Devops preflight to github actions
#  preflight:
#    name: Preflight checks
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3

#      - name: Get Remote Changes PWSH
#        id: remoteCheck
#        shell: pwsh
#        run: ${{GITHUB.WORKSPACE}}/.github/workflows/ps/get_changes_since_last_deployment.ps1 -BaseUrl ${{env.baseUrl}} -ProjectId ${{ env.projectId }} -ApiKey ${{ env.umbracoCloudApiKey }} -DownloadFolder ${{GITHUB.WORKSPACE}}/diff"

#      - name: Apply Changes
#        id: bubber
#        needs: remoteCheck
#        if: ${{ steps.remoteCheck.outputs.REMOTE_CHANGES == true }}
#        shell: bash
#        run: 
        


  ## From Azure Devops
  #     - job: CheckRemoteChanges
  #       displayName: Check for remote changes since last deployment
  #       steps:
  #         - task: ShellScript@2
  #           displayName: Get remote changes if any
  #           name: get_remote_changes
  #           inputs:
  #             scriptPath: devops/get_changes_since_last_deployment.sh
  #             args: '$(project-id) $(umbraco-cloud-api-key) $(Pipeline.Workspace)/git-patch'
  #         - publish: $(Pipeline.Workspace)/git-patch
  #           displayName: Publish git-patch diff file
  #           condition: and(succeeded(), eq(variables['get_remote_changes.remoteChanges'], 'yes'))
  #           artifact: PatchFile

  #     - job: ApplyChanges
  #       displayName: Apply remote change
  #       dependsOn: CheckRemoteChanges
  #       condition: eq(dependencies.CheckRemoteChanges.outputs['get_remote_changes.remoteChanges'], 'yes')
  #       variables:
  #         gitPatchFile: $[ dependencies.CheckRemoteChanges.outputs['get_remote_changes.remoteChangeFile'] ]
  #       steps:
  #         - download: current
  #           displayName: Get patch file to apply
  #           artifact: PatchFile
  #         - bash: |
  #             git config user.name "Build pipeline"
  #             git config user.email email@email.com
  #             git switch -c auto/merge_remote_changes_for_$(Build.BuildNumber)
  #             git apply -v $(Pipeline.Workspace)/PatchFile/$(gitPatchFile)
  #             git commit -m "Auto updated changes from remote for build $(Build.BuildNumber)" .
  #             git remote add tmp-pusher https://company-repository-name@dev.azure.com/company-repository-name/azuredevops-project-name/_git/azuredevops-project-name
  #             git push --set-upstream tmp-pusher auto/merge_remote_changes_for_$(Build.BuildNumber)
  #           displayName: Applying git patch to new branch
  #     - job: ManualApproval
  #       displayName: Possible Manual Approval gate
  #       dependsOn: [CheckRemoteChanges,ApplyChanges]
  #       condition: and(succeeded(), eq(dependencies.CheckRemoteChanges.outputs['get_remote_changes.remoteChanges'], 'yes'))
  #       pool: server
  #       steps:
  #         - task: ManualValidation@0
  #           displayName: Merge remote changes manually
  #           timeoutInMinutes: 30
  #           inputs:
  #             notifyUsers: |
  #               username
  #             instructions: 'Please merge auto/merge_remote_changes_for_$(Build.BuildNumber) and restart build. If this was already done, please just let this step continue.'
  #             onTimeout: 'reject'

  publish:
    name: Zip and Publish to Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create Deployment Meta PWSH
        id: deployment-meta
        shell: pwsh
        run: ${{GITHUB.WORKSPACE}}/.github/workflows/ps/create_deployment.ps1 -BaseUrl ${{env.baseUrl}} -ProjectId ${{ env.projectId }} -ApiKey ${{ env.umbracoCloudApiKey }} -CommitMessage "Run number ${{github.run_number}}"

      #- name: Create Deployment Meta
      #  id: deployment-meta-sh
      #  run: $GITHUB_WORKSPACE/.github/workflows/scripts/create_deployment.sh $projectId $umbracoCloudApiKey "Run number ${{github.run_number}}"
      #  shell: bash

      - name: Zip Source Code
        run: zip -r sources.zip . -x ".git/*" ".github/*" "src/UmbracoProject/bin/*" "src/UmbracoProject/obj/*" "node_modules/*"
        shell: bash

      - name: Post Zipped Artifact PWSH
        shell: pwsh
        run: ${{GITHUB.WORKSPACE}}/.github/workflows/ps/upload_package.ps1 -BaseUrl ${{env.baseUrl}} -ProjectId ${{ env.projectId }} -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} -ApiKey ${{ env.umbracoCloudApiKey }} -FilePath ${{ GITHUB.WORKSPACE }}/sources.zip

      #- name: Post Zipped Artifact
      #  run: $GITHUB_WORKSPACE/.github/workflows/scripts/upload_package.sh $projectId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} $umbracoCloudApiKey $GITHUB_WORKSPACE/sources.zip
      #  shell: bash

      - name: Request Start Deployment PWSH
        shell: pwsh
        run: ${{ GITHUB.WORKSPACE }}/.github/workflows/ps/start_deployment.ps1 -BaseUrl ${{env.baseUrl}} -ProjectId ${{ env.projectId }} -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} -ApiKey ${{ env.umbracoCloudApiKey }}
     # - name: Request Start Deployment
     #  run: $GITHUB_WORKSPACE/.github/workflows/scripts/start_deployment.sh $projectId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} $umbracoCloudApiKey
     #   shell: bash

      - name: Wait for deployment completed PWSH
        shell: pwsh
        run: ${{ GITHUB.WORKSPACE }}/.github/workflows/ps/get_deployment_status.ps1 -BaseUrl ${{ env.baseUrl }} -ProjectId ${{ env.projectId }} -DeploymentId ${{ steps.deployment-meta.outputs.DEPLOYMENT_ID }} -ApiKey ${{ env.umbracoCloudApiKey }}
