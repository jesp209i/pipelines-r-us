name: pipeline

on:
  push:
    branches:
     - main
     - using_project-id
     - powershell
     - pwsh-get-changes

env:
  projectId: ${{ vars.PROJECT_ID }}
  umbracoCloudApiKey: ${{ secrets.UMBRACO_CLOUD_API_KEY }}

jobs:
  preflight:
    name: Preflight checks
    runs-on: ubuntu-latest
    steps:
      # Gets the latest CICD Flow deployment if there is any
      # Will write "latestDeploymentId" to pipeline variables, value can be an uuid or empty string 
      - uses: actions/checkout@v3
      - name: Get Latest Deployment
        id: latest-deployment
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/get-latest-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -PipelineVendor GITHUB
    outputs: 
      latestDeployemntId: ${{ steps.latest-deployment.outputs.latestDeploymentId }}

  checkForChanges:
    name: Check if there are changes since latest deployment
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Download git-patch file based on latest deployment
      # Will write "remoteChanges" to pipeline variables, value can be "yes" or "no"
      # When "remoteChanges" is yes, there will also be downloaded a patch-file to the path you specified in -DownloadFolder parameter
      - name: Fetch Changes From Cloud
        env:
          latestDeploymentId: ${{ needs.preflight.outputs.latestDeployemntId }}
        if: ${{ env.latestDeploymentId != '' }}
        id: latest-changes
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/get-changes-by-id.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -DeploymentId ${{ env.latestDeploymentId }}
          -DownloadFolder ${{GITHUB.WORKSPACE}}/patch
          -PipelineVendor GITHUB

      - name: See diff content if any
        if: ${{ steps.latest-changes.outputs.remoteChanges == 'yes' }}
        shell: pwsh
        run: get-content ${{GITHUB.WORKSPACE}}/patch/git-patch.diff

      - name: Store diff before applying
        if: ${{ steps.latest-changes.outputs.remoteChanges == 'yes' }}
        uses: actions/upload-artifact@v3
        with:
          name: git-patch
          path: ${{GITHUB.WORKSPACE}}/patch/git-patch.diff
          retention-days: 1
    outputs:
      remoteChanges: ${{ steps.latest-changes.outputs.remoteChanges }}  

  applyRemoteChanges:
    name: Apply remote changes
    needs: checkForChanges
    runs-on: ubuntu-latest
    steps:
      - name: hello
        env:
          remoteChanges: ${{ needs.checkForChanges.outputs.remoteChanges }}
        if: ${{ env.remoteChanges == 'yes' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get stored diff
        env:
          remoteChanges: ${{ needs.checkForChanges.outputs.remoteChanges }}
        if: ${{ env.remoteChanges == 'yes' }}
        uses: actions/download-artifact@v3
        with:
          name: git-patch
          path: ${{GITHUB.WORKSPACE}}/patch
      
      - name: Apply Change
        env:
          remoteChanges: ${{ needs.checkForChanges.outputs.remoteChanges }}
        if: ${{ env.remoteChanges == 'yes' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git apply ${{GITHUB.WORKSPACE}}/patch/git-patch.diff
          git add *
          git commit -m "Adding changes in pipeline [skip ci]"
          git push

  publish:
    name: Zip and Publish to Cloud
    runs-on: ubuntu-latest
    needs: [applyRemoteChanges]
    steps:
      - name: fail # fail fast before sending to cloud
        run: exit 1;

      - uses: actions/checkout@v3

      # switch the gitignore files so cloud does not ignore the build frontend assets
      - name: Prepare Cloud Git Ignore
        run: cp cloud.gitignore .gitignore
        shell: bash

      # zip everything, except what is defined in the '.zipignore'
      - name: Zip Source Code
        run: zip -r sources.zip . -x@cloud.zipignore
        shell: bash

      # Request to prepare a deployment
      # - sets the commit message to be used in cloud 
      # - supplies you with a deploymentId to be used in the rest of the process
      - name: Create Deployment Meta
        id: deployment-meta
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/new-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -CommitMessage "Run number ${{github.run_number}}" 
          -PipelineVendor GITHUB

      # Upload your zipped artifact
      - name: Post Zipped Artifact
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/add-deployment-package.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }} 
          -FilePath ${{ GITHUB.WORKSPACE }}/sources.zip

      # Actually request to start the deployment process in cloud
      - name: Request Start Deployment
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/start-deployment.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }}

      # Poll until deployment finishes 
      - name: Wait for deployment completed 
        shell: pwsh
        run: >
          ${{GITHUB.WORKSPACE}}/.github/powershell/test-deployment-status.ps1 
          -ProjectId ${{ env.projectId }} 
          -DeploymentId ${{ steps.deployment-meta.outputs.deploymentId }} 
          -ApiKey ${{ env.umbracoCloudApiKey }}
